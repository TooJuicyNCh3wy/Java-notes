
Exception
	- an object that is generated as the result of an error or an unexpected event. To prevent 
	  exceptions from crashing your program, you must write code that detects and handles them. 
	- an unexpected error that occurs while a program is running, causing the program to halt if 
	  the error is not properly dealt with.


By now, you have probably seen exceptions occur many times. For example, look at the program in BadArray.java @ "Chapter XI Source Codes"

PROGRAM OUTPUT

```
1
2
3
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException:
         Index 3 out of bounds for length 3
         at BadArray.main(BadArray.java:15)
```

The numbers array in this program has three elements, with the subscripts 0, 1, and 2. The for loop that appears in lines 14 and 15, however, attempts to use the subscripts 0, 1, 2, and 3 to read the contents of the array. When the program tries to read the element at numbers[3], an exception occurs and the program is halted.

When an exception occurs at runtime
	- A special type of object known as an *exception object* is created in memory. 

Exception Object
	- An Object that is created in memory when an exception occurs.

The process of creating an exception object is known as throwing an exception. When an exception is thrown...
	- it causes the application to halt unless the application contains code to handle the exception.

Take a closer look at the error message that is displayed when the Code is executed:

```
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException:  
      Index 3 out of bounds for length 3  
      at BadArray.main(BadArray.java:15)
``` 

The error message gives some information about the exception. The first line of this message indicates that the name of the exception is 

java.lang.ArrayIndexOutOfBoundsException. 

This means that the exception object is an instance of the ```ArrayIndexOutOfBoundsException``` class, which is in the java.lang package.

*NOTE*:
	- The error message might look slightly different on your system, depending on the version of 
	  Java you are running. Regardless of your Java version, the error message will display the 
	  name of the exception and information about the cause of the error.

Let’s look at another example. 
	- The program in Code Listing (IntegerDivision.java) asks the user to enter two integers and 
	  then it divides the first integer by the second integer. In the sample run, the user enters 
	  5 and 0, which causes an exception named ```ArithmeticException``` to be thrown when the 	  division operation is attempted. 
	- The ArithmeticException class is in the java.lang package.
 
The exception is thrown because dividing a number by zero is an illegal operation that gives an undefined result.

Program output with example input shown in Bold from IntegerDivision.java

```
Enter an integer: 5 [Enter]
Enter another integer: 0 [Enter]
Exception in thread "main" java.lang.ArithmeticException: / by zero
      at IntegerDivision.main(IntegerDivision.java:24)
```

The programs in BadArray and IntegerDivision demonstrate errors that are easy to avoid. 
	- If the loop were written properly in BadArray
		- The program would not have tried to read outside the bounds of the array and the 
		  exception would not have been thrown. 

In IntegerDivision, a simple if-else statement such as the following could have prevented the exception from being thrown:

``` 
if (number2 != 0)  
 {  
    quotient = number1 / number2;  
    System.out.println("The quotient is " + quotient);  
 }  
 else  
 {  
    System.out.println("The second number cannot be zero");  
 } 
```

Some errors, however, are caused by events that are beyond the control of the application’s code and cannot be avoided. 
	- For example
		- When a Scanner object uses a method such as nextInt or nextDouble to read an item of 
		  input
			- the method will throw an exception if the input is not of the expected data 
			  type. 
			- If the nextInt method reads input that cannot be stored as an int...
				- it will throw an InputMismatchException. 
				- Likewise, if the nextDouble method reads input that cannot be stored 
				  as a double...
					- it will throw an InputMismatchException. 

The program in SalesCommission.java demonstrates this. This program asks the user to enter a sales amount and then it calculates a commission of 10 percent. The Scanner class’s nextDouble method is used in line 19 to get the amount of sales.


```
Program Output with Example Input Shown in Bold

Enter your sales: 10000.00 [Enter]
Your commission: $1,000.00

Program Output with Example Input Shown in Bold

Enter your sales: $10,000.00 [Enter]
Exception in thread "main" java.util.InputMismatchException
      at java.base/java.util.Scanner.throwFor(Scanner.java:939)
      at java.base/java.util.Scanner.next(Scanner.java:1594)
      at java.base/java.util.Scanner.nextDouble(Scanner.java:2564)
      at SalesCommission.main(SalesCommission.java:19)
```

In the first sample run, the user enters 10000.00 as the sales amount
	- The program displays the commission. 
In the second sample run, however, the user entered $10,000.00 as the sales amount. 
	- Because a number cannot contain characters such ‘$’ or commas
		- the nextDouble method throws an InputMismatchException and the program is halted. 			- The InputMismatchException class is in the java.util package.

This is an example of an error that cannot be prevented with a simple if statement. 
	- The Scanner class’s nextDouble method will throw an exception any time the user enters an invalid number, so the application must either handle the exception or let the program crash.

To handle an exception
	- you must write a section of code known as an exception handler.
		- An exception handler gracefully responds to exceptions when they are thrown. 


Exception Handler
	- Code that responds to an exception


If your code does not handle an exception when it is thrown
	- The default exception handler deals with it
		- as shown in the output of Codes that were mentioned right now. 
	- The default exception handler prints an error message and halts the program.


Handling an Exception with the try statement
============================================

To handle an exception, you use the try statement. In this chapter we will look at several variations of the try statement, beginning with the following general format:

```
try  
{ 
   try block statements . . .  
} 
catch (ExceptionType variable)  
{ 
   catch block statements . . .  
} 
```

First the keyword try appears, followed by a group of one or more statements enclosed in a set of braces. This group of statements is known as the try block. The try block contains one or more statements that can potentially throw an exception.

After the try block, a catch clause appears, as follows:

```
catch (ExceptionType variable) 
```

The code inside the parentheses is a variable declaration. It declares a variable known as the catch parameter. 

Catch parameter
	- A variable that exists in a catch block , and references an exception object. 

In the declaration
	- ExceptionType is the name of an exception class and variable is a variable name.
	- If any code inside the try block throws an exception of the ExceptionType class
		- The program will jump to this catch clause
		- variable will reference the exception object. Then, the code that is enclosed in braces, immediately following the catch clause, is executed. This group of statements is known as the catch block.

Let’s look at a program that uses a try statement to handle an exception. Recall that Code Listing 11-3 uses the Scanner class’s nextDouble method to read the user’s input. If the user enters a value that cannot be stored as a double, the nextDouble method throws an InputMismatchException. ExceptionDemo.java shows how the program can be written with a try statement that handles the InputMismatchException.

```
Program Output with Example Input Shown in Bold

Enter your sales: $100,00.00 [Enter]
Enter a valid numeric value.

Program Output with Example Input Shown in Bold

Enter your sales: 100000.00 [Enter]
Your commission: $10,000.00
```

Let’s take a closer look at the program. 

First
	- Notice the import statement in line 2.
	- The InputMismatchException class is in the java.util package, so we must import the class if we want to handle exceptions of that type.

Inside the main method, lines 12 and 13 declare a constant for the commission rate and variables to hold the sales and the commission. Then line 16 creates a Scanner object to read keyboard input. Line 17 is the beginning of a try statement. If any of the code inside the try block throws an exception, the program will search for a catch clause that can deal with the exception. The following catch clause appears in line 29:

catch(InputMismatchException e) 
This catch clause declares an InputMismatchException variable named e. This is the catch parameter. If any statement inside the try block throws an exception of the InputMismatchException class, the program will jump to this catch clause and the e variable will reference the exception object. Then, the code inside the catch block will execute. In this case, the message “Enter a valid numeric value.” will be displayed. After the catch block is executed, the program will resume with the code that appears after the entire try/catch construct.

Look at the first sample run of the program. When the statement in line 21 executed, the user entered $100,00.00. Because a number cannot contain characters such ‘$’ or commas, the nextDouble method threw an InputMismatchException. When the exception was thrown, the program immediately exited the try block, skipping the remaining statements in the block (lines 23 through 27). The program jumps to the catch clause in line 29 and executes the catch block that follows it. Figure 11-1 illustrates this sequence of events.

Figure 11-1
Sequence of events when an exception is thrown
https://cite-media.pearson.com/legacy_paths/5de2c6f2-65ae-4d43-8437-27333b55629b/FG_11_001.png

Line 1 at indentation level 0: try. Line 2 at indentation level 0:open curly braces. Line 3 at indentation level 1: forward slash forward slash Get the amount of sales dot. Line 4 at indentation level 1: System dot out dot print open parenthesis open double quotes Enter your sales colon close double quotes close parenthesis semicolon. Line 5 at indentation level 1: sales equals keyboard dot next Double open parenthesis close parenthesis semicolon. Line 6 at indentation level 1: forward slash forward slash Calculate the commission dot. Line 7 at indentation level 1: commission equals sales asterisk COMMISSION underscore RATE semicolon. Line 8 at indentation level 1: forward slash forward slash Display the commission dot. Line 9 at indentation level 1: System dot out dot print f open parenthesis open double quotes Your commission colon dollar percent comma dot 2f backward slash n close double quotes comma commission close parenthesis semicolon. Line 10 at indentation level 0: close curly braces. Line 11 at indentation level 0: catch open parenthesis Input Mismatch Exception e close parenthesis. Line 12 at indentation level 0: open curly braces. Line 13 at indentation level 0: System dot out dot print ln open parenthesis open double quotes Enter a valid numeric value dot close double quotes close parenthesis semicolon. Line 14 at indentation level 0: close curly braces. An arrow labeled, If this statement throws an exception, points to line 5. An arrow labeled then these statements are skipped points to line 6 to line 9. an arrow labeled if the exception is an Input Mismatch Exception, the program jumps to this catch clause points to line 11.

Now look at the second sample run of the program. This time, when the statement in line 21 executed, the user entered 10000.00. This is a valid number, so no exception is thrown. The program continues executing the statements in the try block. When the program reaches the end of the try block, the catch block is skipped. Figure 11-2 illustrates this sequence of events.

Figure 11-2
Sequence of events when no exception is thrown
https://cite-media.pearson.com/legacy_paths/b6017b92-dff0-4fbe-936d-c228c263695f/FG_11_002.png

When an Exception Is Not Caught
=================================

Suppose an exception is thrown by a statement inside a try block, and the exception’s type does not match the catch parameter’s type. For example, the following try statement handles exceptions of the InputMismatchException type. What happens if one of the statements in the try block throws an exception of the NumberFormatException type?

try  
{ 
   Statements  
} 
catch (InputMismatchException e)  
{ 
   Code that responds to the exception...  
} 

Because the try statement catches only InputMismatchExceptions, the Number FormatException will not be caught. The result will be the same as if the try statement did not exist.

More About Exception Classes
=============================

Exception objects are created from classes in the Java API. The API has an extensive hierarchy of exception classes. A small part of the hierarchy is shown in Figure 11-3. As you can see, all the exception classes inherit from the Throwable class. Just below the Throwable class are the classes Error and Exception.

Figure 11-3
Part of the exception class hierarchy
https://cite-media.pearson.com/legacy_paths/68af68d2-5d78-4692-8d08-3a50a765822e/FG_11_003_NEW.png

Classes that inherit from Error are exceptions that are thrown when a critical error occurs, such as an internal error in the Java Virtual Machine or the system running out of memory. Your applications should not try to handle these errors because they are the result of a serious condition. All the exceptions that you will handle are instances of classes that inherit from Exception. Figure 11-3 shows two of these classes: IOException and RuntimeException. These classes also serve as superclasses. IOException serves as a superclass for exceptions that are related to file and network operations. RuntimeException serves as a superclass for a wide variety of exceptions including InputMismatchException.


Checked and Unchecked Exceptions
==================================

In Java, there are two categories of exceptions, checked and unchecked:

Checked exceptions cannot be ignored. They are called “checked” exceptions because the compiler checks your source code to make sure that you have dealt with them. Typically, these exceptions are caused by events that are beyond the control of the application’s code and cannot be avoided. If your code calls a method or constructor that can potentially throw a checked exception, a compiler error will result if your code does not deal with the exception.
Unchecked exceptions usually happen when a program does not take adequate steps to prevent errors. The compiler does not check your source code to make sure you have dealt with unchecked exceptions. It is your responsibility to anticipate the errors that cause unchecked exceptions and write your code in such a way that prevents them from happening.
Figure 11-4 shows where the checked and unchecked exception classes are found in the Java class hierarchy. The unchecked exceptions are the exception classes that inherit from the Error class or the RuntimeException class. All the classes that inherit from Exception, but do NOT inherit from RuntimeException, are the checked exceptions.

Figure 11-4
Checked and unchecked exceptions
https://cite-media.pearson.com/legacy_paths/b2855959-bdf9-4fac-92b2-ef87b15bcd26/FG_11_004.png

Handling Checked Exceptions

If you have written a method containing code that can throw a checked exception, your method must meet one of the following requirements:

It must handle the exception with a try statement, or
It must have a throws clause listed in the method header.

For example, suppose you have written a method named myMethod that contains several statements, and one of the statements can throw an IOException. Because IOException is a checked exception, myMethod is required to deal with it in one of the two ways previously described. The first way is to put the code that can throw the exception in a try statement, as shown here:

```
public static void myMethod()  
{  
   try  
   {  
      Statement  
      Statement that can throw an IOException  
      Statement  
   }  
   catch (IOException e)  
   {  
     Code that responds to the exception...  
   }  
} 
```
In this approach, if an IOException is thrown, the code that we have written in the catch block will execute and the program will continue to run.

If we do not want to handle the IOException in myMethod, our second option is to have a throws clause in the header for myMethod, as shown here:

```
public static void myMethod() throws IOException  
{  
   Statement  
   Statement that can throw an IOException  
   Statement  
} 
```
In this approach, we are declaring that myMethod can throw an IOException. Notice that there is no try statement in the method. If an IOException is thrown, myMethod will stop executing, and the exception will be passed back to the code that called myMethod. It then becomes the responsibility of the calling code to either handle the exception with a try statement or pass it back to the code that called it. It’s possible to pass an exception all the way back to the main method. If the main method does not handle the exception, but has a throws clause in its header, the program will halt.

Preventing Unchecked Exceptions
The Java compiler does not require you to handle unchecked exceptions with a try statement, or declare them with a throws clause. This is because unchecked exceptions are usually preventable. For example, when reading data from an array, you can prevent an ArrayIndexOutOfBoundsException by making sure your array subscript is less than the length of the array and not less than zero. When performing integer division, you can prevent an ArithmeticException by making sure the number you are dividing by is not zero. In most cases, instead of using a try statement to handle unchecked exceptions, you should design your programs to prevent them from happening.

TIP: Sometimes you might decide that a try statement is the best way to handle an unchecked exception. For example, Code Listing 11-4 uses a try statement to handle the InputMismatchException (an unchecked exception) that is thrown by the Scanner class’s nextDouble method. Because we cannot prevent the user from entering bad input, it is acceptable to use a try statement to handle the InputMismatchException.

Exceptions and Packages
========================

The exception classes are organized in packages in the Java API. For example, ArrayIndexOutOfBoundsException is in the java.lang package, InputMismatchException is in the java.util package, and FileNotFoundException is in the java.io package. When you handle an exception that is not in the java.lang package, you will need the appropriate import statement in your program. For example, recall that Code Listing 11-4 handles InputMismatchException, so the following import statement appeared at the top of the program:

```
import java.util.InputMismatchException; 
```

Exceptions and the Java API Documentation
The official Java API documentation, which is available on the web, is your best resource for discovering which exceptions are thrown by the API methods. Go to the API documentation website for the version of Java that you are using, and in the search bar, type the name of the method you are interested in. The documentation page for the specified method will list all the exceptions that are thrown by the method.

TIP: A quick web search will locate the API documentation website for the version of Java that you are using. For example, if you search the web for Java 14 API documentation, the JDK 14 Documentation Home Page should be one of the first results. Go to the Home Page and click the link for the API Documentation.

If a web search does not give you helpful results, you can go directly to docs.oracle.com. Then, click Java, then click Java SE, then click API Documentation. This will take you to the API documentation for the current version of Java.

For example, suppose you are writing code that uses the Integer.parseInt method, and you want to know which exceptions are thrown by the method. First, you would open the API documentation in your web browser, and then you would type Integer.parseInt in the search bar. This will show you a list of all the overloaded versions of the Integer.parseInt method. Select the one you are interested in to see its documentation page. Figure 11-5 shows the documentation for the Integer.parseInt(String) method.


